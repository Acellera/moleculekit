variables:
  - group: secrets

trigger:
  branches:
    include:
      - master
      - refs/tags/*

stages:
  - stage: Test
    jobs:
      - template: test_job.yml
        parameters:
          name: TestLinux
          displayName: Linux tests
          vmImage: 'ubuntu-16.04'
          OS: linux

      - template: test_job.yml
        parameters:
          name: TestMacOSX
          displayName: Mac OSX tests
          vmImage: 'macOS-latest'
          OS: mac

  - stage: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/tags/*'))
    jobs:
      - template: build_artifact_job.yml
        parameters:
          name: BuildLinuxArtifacts
          displayName: Build Linux Artifacts
          vmImage: 'ubuntu-16.04'
          OS: linux

      - template: build_artifact_job.yml
        parameters:
          name: BuildOSXArtifacts
          displayName: Build OSX Artifacts
          vmImage: 'macOS-latest'
          OS: mac


  # - job: PublishPyPI
  #   dependsOn:
  #     - TestMacOSX
  #     - TestLinux
  #   condition: and(succeeded('TestMacOSX'), succeeded('TestLinux'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  #   pool:
  #     vmImage: "ubuntu-16.04"

  #   steps:
  #     - task: UsePythonVersion@0
  #       displayName: "Use Python 3.6"
  #       inputs:
  #         versionSpec: 3.6
  #         addToPath: true
  #         architecture: "x64"
        
  #     - script: |
  #         pip install setuptools
  #         pip install wheel
  #         pushd $(BUILD.REPOSITORY.LOCALPATH)
  #         python setup.py bdist_wheel
  #         popd
  #       displayName: "Build drop file"

  #     - task: CopyFiles@2
  #       inputs:
  #         SourceFolder: $(BUILD.REPOSITORY.LOCALPATH)/dist
  #         TargetFolder: $(Build.ArtifactStagingDirectory)
  #       displayName: "Copy Files to: build artifact staging directory"

  #     - task: PublishBuildArtifacts@1
  #       inputs:
  #         pathtoPublish: $(Build.ArtifactStagingDirectory)
  #         artifactName: build-artifact-drop

  #     - task: TwineAuthenticate@1
  #       displayName: 'Twine Authenticate'
  #       inputs:
  #         externalFeeds: pypitest

  #     - script: |
  #         python -m twine upload -r "pypitest" --config-file $(PYPIRC_PATH) dist/*.whl
  #       displayName: Uploading to PyPI